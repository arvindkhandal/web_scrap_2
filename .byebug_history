c
filters["company_size"].split('-')
filters["company_size"]
c
parsed_page_1.css('._company_86jzd_338').empty?
c
companies.empty?
companies.nil?
companies
company_element
n
parsed_page_1.css('._company_86jzd_338')
c
companies.take(params[:n].to_i).count
companies.take(params[:n].to_i)
companies.class
param
companies.count
c
parsed_page_2.at_css('.group a[href^="http"]')['href']
parsed_page_2.at_css('.group a[href^="http"]')
parsed_page_2.css('.mb-2').name
parsed_page_2.css('.mb-2')['href']
parsed_page_2.css('.mb-2')
parsed_page_2.css('.space-y-5 > div')
c
parsed_page_2.css('.space-y-4 > div')
parsed_page_2.css('.space-y-5 > div')
c
exit
founders.first.at_css('a[href*="linkedin.com"]').values.first
founders.first.at_css('a[href*="linkedin.com"]').values
founders.first.at_css('a[href*="linkedin.com"]')
founders.first.at_css(".mt-1")
founders.first.at_css(".mt-1")\
founders.first.at_css(".mt-1").first
founders.first.at_css(".mt-1")['href']
founders.first.at_css(".mt-1")
founders.first.at_css(".mt-1 space-x-2")
founders.first.at_css("mt-1 space-x-2")
founders.first.at_css('mt-1')
founders.first.at_css('href')
founders.first.at_css('a')
founders.first.at_css('.mt-1')['href']
founders.first.at_css('.mt-1')[1]
founders.first.at_css('.mt-1')
founders.first.at_css('a')['href']
founders.first.at_css('a')[1]['href']
founders.first.at_css('a')['href']
founders.first.at_css('a')
founders.first.at_css(
founders.first
founders.first.at_css('.font-bold').text
founders.first.at_css('.font-bold')
founders.first.at_css('.font-bold').values
founders.first.at_css('.font-bold').value
founders.first.at_css('.font-bold')
founders.first.at_css('font-bold')
founders.first
founders.first.at_css('h3').text.strip
founders = parsed_page_2.css('.space-y-4 > div')
founders = parsed_page_2.css('.space-y-5 > div')
parsed_page_2
founders = parsed_page_2.css('.space-y-5 > div')
parsed_page_2
exit
c
parsed_page_2.css('.space-y-5 > div').count
c
n
founders
n
exit
founders = parsed_page_2.css('.space-y-5 > div').map do |founder_element|  name = founder_element.at_css('h3').text.strip linkedin_element = founder_element.at_css('a[href*="linkedin.com"]') linkedin = linkedin_element['href'] if linkedin_element { name: name, linkedin: linkedin || "N/A" } end
founders = parsed_page_2.css('.space-y-5 > div').map do |founder_element| 
    end
      { name: name, linkedin: linkedin || "N/A" }
      linkedin = linkedin_element['href'] if linkedin_element
      linkedin_element = founder_element.at_css('a[href*="linkedin.com"]')
      name = founder_element.at_css('h3').text.strip
founders = parsed_page_2.css('.space-y-5 > div').map do |founder_element|
founders.first.at_css('a[href*="linkedin.com"]')['href']
founders.first['href']
founders.first.at_css('a[href*="linkedin.com"]').values[0]
founders.first.at_css('a[href*="linkedin.com"]').values
founders.first.at_css('a[href*="linkedin.com"]')
founders.first.at_css('h3').text.strip
founders = parsed_page_2.css('.space-y-5 > div')
parsed_page_2.css('.space-y-5 > div').map do |founder_element|  name = founder_element.at_css('h3').text.strip puts name end
parsed_page_2..css('.space-y-5 > div').map do |founder_element|  name = founder_element.at_css('h3').text.strip puts name end
parsed_page_2..css('.space-y-5 > div').map do |founder_element| 
parsed_page_2..css('.space-y-5 > div').map do |founder_element|
parsed_page_2.css('.space-y-5 > div')
exit
founders.first['href']
founders.first.['href']
founders.first.at_css('a[href*="linkedin.com"]').values[0]
founders.first.at_css('a[href*="linkedin.com"]').values
founders.first.at_css('a[href*="linkedin.com"]')
founders.first.at_css('h3').text.strip
founders = parsed_page_2.css('.space-y-5 > div')
founder_element
name = founder_element.at_css('h3').text.strip
exit
founders.first
founders.first.at_css('h3')
founders.first.at_css('h3').text.strip
founders.first
founders = parsed_page_2.css('.flex-row')
parsed_page_2.css('.flex-row')
 website = website_element['href'] if website_element
website_element = parsed_page_2.at_css('.group a[href^="http"]')
parsed_page_2.at_css('.group a[href^="http"]')
parsed_page_2.css('.inline-block')
parsed_page_2
parsed_page_2['href']
parsed_page_2
exit
parsed_page_2 = Nokogiri::HTML(driver2.page_source)
driver2.get("https://www.ycombinator.com#{link}")
parsed_page_2 = Nokogiri::HTML(driver2.page_source)
n
exit
parsed_page_2 = Nokogiri::HTML(driver2.page_source)
driver2.get("https://www.ycombinator.com#{link}")
driver2 = Selenium::WebDriver.for :chrome, options: options2
driver2.get("https://www.ycombinator.com#{link}")
"https://www.ycombinator.com#{link}"
n
exit
fetch_second_page_data(link)
exit
c
s_data = fetch_second_page_data(link)
link = company_element['href']
exit
c
s_data = second_page(link)
link = "https://www.ycombinator.com/companies/airbnb"
"https://www.ycombinator.com#{link}"
"https://www.ycombinator.com/#{link}"
link = company_element['href']
"https://www.ycombinator.com/#{link}"
company_element['href']
exit
c
company_element['href']
company_element['href]
company_element.values[1]
company_element.values
company_element.css('a').first['href']
company_element.at_name
company_element.at_href
company_element.value?
company_element.value
company_element.values
company_element.calues
company_element
exit
cc
c
cc
c
n
c
n
c
company_element.at_css('._tagLink_86jzd_1023').text.strip
company_element.at_css('._coDescription_86jzd_478').text.strip
company_element.at_css('._coLocation_86jzd_469').text.strip
company_element.at_css('._coName_86jzd_453').text.strip
company_element.at_css('.company-name').text.strip
company_element
c
companies = parsed_page_1.css('._company_86jzd_338') 
 parsed_page_1 = Nokogiri::HTML(driver.page_source)
companies = parsed_page_1.css('._company_86jzd_338')
parsed_page_1 = Nokogiri::HTML(driver.page_source)
c
n
companies = parsed_page_1.css('._company_86jzd_338')
parsed_page_1.css('._company_86jzd_338')
parsed_page_1 = Nokogiri::HTML(driver.page_source)
